{"ast":null,"code":"import { exportInstance, GetCollectionsByAddress, GetCollectionsNftList, GetMyCollectionsList, GetMyLikedNft, GetMyNftList, GetMyOnSaleNft, GetNftDetails, getOrderDetails } from \"../apiServices\";\nimport { ethers } from \"ethers\";\nimport contracts from \"../Config/contracts\";\n\n// const ipfsAPI = require(\"ipfs-api\");\n// const ipfs = ipfsAPI(\"ipfs.infura.io\", \"5001\", {\n//   protocol: \"https\",\n//   auth: \"21w11zfV67PHKlkAEYAZWoj2tsg:f2b73c626c9f1df9f698828420fa8439\",\n// });\n\nconst toTypedOrder = (account, tokenAddress, id, quantity, listingType, paymentTokenAddress, valueToPay, deadline, bundleTokens, bundleTokensQuantity, salt) => {\n  const domain = {\n    chainId: 80001,\n    name: \"LN Marketplace\",\n    verifyingContract: contracts.MARKETPLACE,\n    version: \"1\"\n  };\n  const types = {\n    Order: [{\n      name: \"user\",\n      type: \"address\"\n    }, {\n      name: \"tokenAddress\",\n      type: \"address\"\n    }, {\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      name: \"quantity\",\n      type: \"uint256\"\n    }, {\n      name: \"listingType\",\n      type: \"uint256\"\n    }, {\n      name: \"paymentToken\",\n      type: \"address\"\n    }, {\n      name: \"value\",\n      type: \"uint256\"\n    }, {\n      name: \"deadline\",\n      type: \"uint256\"\n    }, {\n      name: \"bundleTokens\",\n      type: \"uint256[]\"\n    }, {\n      name: \"bundleTokensQuantity\",\n      type: \"uint256[]\"\n    }, {\n      name: \"salt\",\n      type: \"uint256\"\n    }]\n  };\n  const value = {\n    user: account,\n    tokenAddress: tokenAddress,\n    tokenId: id,\n    quantity: quantity,\n    listingType: listingType,\n    paymentToken: paymentTokenAddress,\n    value: valueToPay,\n    deadline: deadline,\n    bundleTokens: bundleTokens,\n    bundleTokensQuantity: bundleTokensQuantity,\n    salt: salt\n  };\n  return {\n    domain,\n    types,\n    value\n  };\n};\nexport const readReceipt = async hash => {\n  try {\n    let provider = new ethers.providers.Web3Provider(window.ethereum);\n    const receipt = await provider.getTransactionReceipt(hash.hash);\n    let contractAddress = receipt.logs[0].address;\n    return contractAddress;\n  } catch (e) {\n    console.log(\"error in api\", e);\n  }\n};\nexport const getSignature = async function (signer) {\n  try {\n    console.log(\"111\");\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    const order = toTypedOrder(...args);\n    console.log(\"order is---->\", order);\n    let provider = new ethers.providers.Web3Provider(window.ethereum);\n    console.log(\"222\");\n    const signer1 = provider.getSigner();\n    console.log(\"signer1=========>\", signer1.address);\n    console.log(\"333\");\n    console.log(args);\n    const signedTypedHash = await signer1._signTypedData(order.domain, order.types, order.value);\n    console.log(\"444\");\n    const sig = ethers.utils.splitSignature(signedTypedHash);\n    console.log(\"555\");\n    return [sig.v, sig.r, sig.s];\n  } catch (e) {\n    if (e.code === 4001) {\n      console.log(\"User denied \");\n      return false;\n    }\n    console.log(\"error in api\", e);\n    return false;\n  }\n};","map":{"version":3,"names":["exportInstance","GetCollectionsByAddress","GetCollectionsNftList","GetMyCollectionsList","GetMyLikedNft","GetMyNftList","GetMyOnSaleNft","GetNftDetails","getOrderDetails","ethers","contracts","toTypedOrder","account","tokenAddress","id","quantity","listingType","paymentTokenAddress","valueToPay","deadline","bundleTokens","bundleTokensQuantity","salt","domain","chainId","name","verifyingContract","MARKETPLACE","version","types","Order","type","value","user","tokenId","paymentToken","readReceipt","hash","provider","providers","Web3Provider","window","ethereum","receipt","getTransactionReceipt","contractAddress","logs","address","e","console","log","getSignature","signer","args","order","signer1","getSigner","signedTypedHash","_signTypedData","sig","utils","splitSignature","v","r","s","code"],"sources":["/home/dell/Documents/Market/src/helpers/getterFunctions.js"],"sourcesContent":["import {\n  exportInstance,\n  GetCollectionsByAddress,\n  GetCollectionsNftList,\n  GetMyCollectionsList,\n  GetMyLikedNft,\n  GetMyNftList,\n  GetMyOnSaleNft,\n  GetNftDetails,\n  getOrderDetails,\n} from \"../apiServices\";\nimport { ethers } from \"ethers\";\nimport contracts from \"../Config/contracts\";\n\n// const ipfsAPI = require(\"ipfs-api\");\n// const ipfs = ipfsAPI(\"ipfs.infura.io\", \"5001\", {\n//   protocol: \"https\",\n//   auth: \"21w11zfV67PHKlkAEYAZWoj2tsg:f2b73c626c9f1df9f698828420fa8439\",\n// });\n\nconst toTypedOrder = (\n  account,\n  tokenAddress,\n  id,\n  quantity,\n  listingType,\n  paymentTokenAddress,\n  valueToPay,\n  deadline,\n  bundleTokens,\n  bundleTokensQuantity,\n  salt\n) => {\n  const domain = {\n    chainId: 80001,\n    name: \"LN Marketplace\",\n    verifyingContract: contracts.MARKETPLACE,\n    version: \"1\",\n  };\n  const types = {\n    Order: [\n      { name: \"user\", type: \"address\" },\n      { name: \"tokenAddress\", type: \"address\" },\n      { name: \"tokenId\", type: \"uint256\" },\n      { name: \"quantity\", type: \"uint256\" },\n      { name: \"listingType\", type: \"uint256\" },\n      { name: \"paymentToken\", type: \"address\" },\n      { name: \"value\", type: \"uint256\" },\n      { name: \"deadline\", type: \"uint256\" },\n      { name: \"bundleTokens\", type: \"uint256[]\" },\n      { name: \"bundleTokensQuantity\", type: \"uint256[]\" },\n      { name: \"salt\", type: \"uint256\" },\n    ],\n  };\n\n  const value = {\n    user: account,\n    tokenAddress: tokenAddress,\n    tokenId: id,\n    quantity: quantity,\n    listingType: listingType,\n    paymentToken: paymentTokenAddress,\n    value: valueToPay,\n    deadline: deadline,\n    bundleTokens: bundleTokens,\n    bundleTokensQuantity: bundleTokensQuantity,\n    salt: salt,\n  };\n\n  return { domain, types, value };\n};\n\nexport const readReceipt = async (hash) => {\n  try {\n    let provider = new ethers.providers.Web3Provider(window.ethereum);\n    const receipt = await provider.getTransactionReceipt(hash.hash);\n    let contractAddress = receipt.logs[0].address;\n    return contractAddress;\n  } catch (e) {\n    console.log(\"error in api\", e);\n  }\n};\n\nexport const getSignature = async (signer, ...args) => {\n  try {\n    console.log(\"111\");\n    const order = toTypedOrder(...args);\n    console.log(\"order is---->\", order);\n    let provider = new ethers.providers.Web3Provider(window.ethereum);\n    console.log(\"222\");\n    const signer1 = provider.getSigner();\n    console.log(\"signer1=========>\", signer1.address);\n    console.log(\"333\");\n    console.log(args);\n    const signedTypedHash = await signer1._signTypedData(\n      order.domain,\n      order.types,\n      order.value\n    );\n    console.log(\"444\");\n    const sig = ethers.utils.splitSignature(signedTypedHash);\n    console.log(\"555\");\n\n    return [sig.v, sig.r, sig.s];\n  } catch (e) {\n    if (e.code === 4001) {\n      console.log(\"User denied \");\n      return false;\n    }\n    console.log(\"error in api\", e);\n    return false;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}