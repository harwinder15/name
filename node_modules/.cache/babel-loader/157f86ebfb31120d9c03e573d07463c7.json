{"ast":null,"code":"import { getType } from 'typesafe-actions';\nimport * as actions from '../actions';\nimport { handleSelection } from '../utils';\nexport const defaultState = {\n  selectedCategories: new Set(),\n  selectedStatus: new Set(),\n  selectedItemsType: new Set(),\n  selectedCollections: new Set(),\n  filterNftTitle: ''\n};\nconst states = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const payload = action.payload;\n  switch (action.type) {\n    case getType(actions.filterCategories):\n      let selectedCategories = payload.value ? handleSelection(state.selectedCategories, payload.value, payload.singleSelect) : new Set();\n      return {\n        ...state,\n        selectedCategories\n      };\n    case getType(actions.filterStatus):\n      let selectedStatus = payload.value ? handleSelection(state.selectedStatus, payload.value, payload.singleSelect) : new Set();\n      return {\n        ...state,\n        selectedStatus\n      };\n    case getType(actions.filterItemsType):\n      let selectedItemsType = payload.value ? handleSelection(state.selectedItemsType, payload.value, payload.singleSelect) : new Set();\n      return {\n        ...state,\n        selectedItemsType\n      };\n    case getType(actions.filterCollections):\n      let selectedCollections = payload.value ? handleSelection(state.selectedCollections, payload.value, payload.singleSelect) : new Set();\n      return {\n        ...state,\n        selectedCollections\n      };\n    case getType(actions.filterNftTitle):\n      return {\n        ...state,\n        filterNftTitle: action.payload\n      };\n    case getType(actions.clearFilter):\n      return {\n        selectedCategories: new Set(),\n        selectedStatus: new Set(),\n        selectedItemsType: new Set(),\n        selectedCollections: new Set(),\n        filterNftTitle: ''\n      };\n    default:\n      return state;\n  }\n};\nexport default states;","map":{"version":3,"names":["getType","actions","handleSelection","defaultState","selectedCategories","Set","selectedStatus","selectedItemsType","selectedCollections","filterNftTitle","states","state","action","payload","type","filterCategories","value","singleSelect","filterStatus","filterItemsType","filterCollections","clearFilter"],"sources":["/home/dell/Documents/Market/src/store/reducers/filters.js"],"sourcesContent":["import { getType } from 'typesafe-actions';\nimport * as actions from '../actions';\nimport { handleSelection } from '../utils';\n\nexport const defaultState = {\n  selectedCategories: new Set(),\n  selectedStatus: new Set(),\n  selectedItemsType: new Set(),\n  selectedCollections: new Set(),\n  filterNftTitle: ''\n};\n\nconst states = (state = defaultState, action) => {\n    const payload = action.payload;\n  switch (action.type) {    \n    case getType(actions.filterCategories):\n        let selectedCategories = payload.value ? handleSelection(state.selectedCategories, payload.value, payload.singleSelect) : new Set();\n      return { ...state, selectedCategories};\n\n    case getType(actions.filterStatus):\n        let selectedStatus = payload.value ? handleSelection(state.selectedStatus, payload.value, payload.singleSelect) : new Set();\n      return { ...state, selectedStatus};\n\n    case getType(actions.filterItemsType):\n        let selectedItemsType = payload.value ? handleSelection(state.selectedItemsType, payload.value, payload.singleSelect) : new Set();\n      return { ...state, selectedItemsType};\n\n    case getType(actions.filterCollections):\n        let selectedCollections = payload.value ? handleSelection(state.selectedCollections, payload.value, payload.singleSelect) : new Set();\n      return { ...state, selectedCollections};\n    \n    case getType(actions.filterNftTitle):\n      return { ...state, filterNftTitle: action.payload};\n\n    case getType(actions.clearFilter):\n      return { \n        selectedCategories: new Set(),\n        selectedStatus: new Set(),\n        selectedItemsType: new Set(),\n        selectedCollections: new Set(),\n        filterNftTitle: ''\n      };\n    \n    default:\n      return state;\n  }\n};\n\nexport default states;\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,kBAAkB;AAC1C,OAAO,KAAKC,OAAO,MAAM,YAAY;AACrC,SAASC,eAAe,QAAQ,UAAU;AAE1C,OAAO,MAAMC,YAAY,GAAG;EAC1BC,kBAAkB,EAAE,IAAIC,GAAG,EAAE;EAC7BC,cAAc,EAAE,IAAID,GAAG,EAAE;EACzBE,iBAAiB,EAAE,IAAIF,GAAG,EAAE;EAC5BG,mBAAmB,EAAE,IAAIH,GAAG,EAAE;EAC9BI,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,MAAM,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGR,YAAY;EAAA,IAAES,MAAM;EACxC,MAAMC,OAAO,GAAGD,MAAM,CAACC,OAAO;EAChC,QAAQD,MAAM,CAACE,IAAI;IACjB,KAAKd,OAAO,CAACC,OAAO,CAACc,gBAAgB,CAAC;MAClC,IAAIX,kBAAkB,GAAGS,OAAO,CAACG,KAAK,GAAGd,eAAe,CAACS,KAAK,CAACP,kBAAkB,EAAES,OAAO,CAACG,KAAK,EAAEH,OAAO,CAACI,YAAY,CAAC,GAAG,IAAIZ,GAAG,EAAE;MACrI,OAAO;QAAE,GAAGM,KAAK;QAAEP;MAAkB,CAAC;IAExC,KAAKJ,OAAO,CAACC,OAAO,CAACiB,YAAY,CAAC;MAC9B,IAAIZ,cAAc,GAAGO,OAAO,CAACG,KAAK,GAAGd,eAAe,CAACS,KAAK,CAACL,cAAc,EAAEO,OAAO,CAACG,KAAK,EAAEH,OAAO,CAACI,YAAY,CAAC,GAAG,IAAIZ,GAAG,EAAE;MAC7H,OAAO;QAAE,GAAGM,KAAK;QAAEL;MAAc,CAAC;IAEpC,KAAKN,OAAO,CAACC,OAAO,CAACkB,eAAe,CAAC;MACjC,IAAIZ,iBAAiB,GAAGM,OAAO,CAACG,KAAK,GAAGd,eAAe,CAACS,KAAK,CAACJ,iBAAiB,EAAEM,OAAO,CAACG,KAAK,EAAEH,OAAO,CAACI,YAAY,CAAC,GAAG,IAAIZ,GAAG,EAAE;MACnI,OAAO;QAAE,GAAGM,KAAK;QAAEJ;MAAiB,CAAC;IAEvC,KAAKP,OAAO,CAACC,OAAO,CAACmB,iBAAiB,CAAC;MACnC,IAAIZ,mBAAmB,GAAGK,OAAO,CAACG,KAAK,GAAGd,eAAe,CAACS,KAAK,CAACH,mBAAmB,EAAEK,OAAO,CAACG,KAAK,EAAEH,OAAO,CAACI,YAAY,CAAC,GAAG,IAAIZ,GAAG,EAAE;MACvI,OAAO;QAAE,GAAGM,KAAK;QAAEH;MAAmB,CAAC;IAEzC,KAAKR,OAAO,CAACC,OAAO,CAACQ,cAAc,CAAC;MAClC,OAAO;QAAE,GAAGE,KAAK;QAAEF,cAAc,EAAEG,MAAM,CAACC;MAAO,CAAC;IAEpD,KAAKb,OAAO,CAACC,OAAO,CAACoB,WAAW,CAAC;MAC/B,OAAO;QACLjB,kBAAkB,EAAE,IAAIC,GAAG,EAAE;QAC7BC,cAAc,EAAE,IAAID,GAAG,EAAE;QACzBE,iBAAiB,EAAE,IAAIF,GAAG,EAAE;QAC5BG,mBAAmB,EAAE,IAAIH,GAAG,EAAE;QAC9BI,cAAc,EAAE;MAClB,CAAC;IAEH;MACE,OAAOE,KAAK;EAAC;AAEnB,CAAC;AAED,eAAeD,MAAM"},"metadata":{},"sourceType":"module"}