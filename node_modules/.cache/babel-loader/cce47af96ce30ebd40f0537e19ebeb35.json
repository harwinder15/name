{"ast":null,"code":"var _jsxFileName = \"/home/dell/Documents/Market/src/components/menu/AccountModal/Accountmodal.jsx\",\n  _s = $RefreshSig$();\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect, useCallback } from \"react\";\nimport Web3 from \"web3\";\nimport { connect } from \"react-redux\";\nimport { accountUpdate, tokenUpdate } from \"../../../redux/actions\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport WalletLink from \"walletlink\";\nimport COINBASE_ICON from \"./../../../assets/react.svg\";\nimport { Networks } from \"./networks\";\nimport { Login, Logout, Register, checkuseraddress } from \"../../../apiServices\";\n// import Authereum from \"authereum\";\n\nimport { NotificationManager } from \"react-notifications\";\nimport PopupModal from \"./popupModal\";\nimport { BsExclamationLg } from \"react-icons/bs\";\n// import \"./Mode.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction initWeb3(provider) {\n  const web3 = new Web3(provider);\n  web3.eth.extend({\n    methods: [{\n      name: \"chainId\",\n      call: \"eth_chainId\",\n      outputFormatter: web3.utils.hexToNumber\n    }]\n  });\n  return web3;\n}\nconst AccountModal = props => {\n  _s();\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [wrongNetwork, setWrongNetwork] = useState(false);\n  const [isPopup, setIsPopup] = useState(false);\n  let web3Modal = null;\n  let web3 = null;\n  let provider = null;\n\n  // to initilize the web3Modal\n\n  const init = async () => {\n    const providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider,\n        options: {\n          rpc: {\n            80001: process.env.REACT_APP_RPC_URL\n          },\n          network: process.env.REACT_APP_NETWORK,\n          chainId: process.env.REACT_APP_CHAIN_ID\n          // infuraId: YOUR_INFURA_KEY,\n        }\n      },\n\n      \"custom-coinbase\": {\n        display: {\n          logo: COINBASE_ICON,\n          name: \"Coinbase\",\n          description: \"Scan with WalletLink to connect\"\n        },\n        options: {\n          appName: \"app\",\n          // Your app name\n          networkUrl: process.env.REACT_APP_RPC_URL,\n          chainId: process.env.REACT_APP_CHAIN_ID\n        },\n        package: WalletLink,\n        connector: async (_, options) => {\n          const {\n            appName,\n            networkUrl,\n            chainId\n          } = options;\n          const walletLink = new WalletLink({\n            appName\n          });\n          const provider = walletLink.makeWeb3Provider(networkUrl, chainId);\n          await provider.enable();\n          return provider;\n        }\n      }\n    };\n    web3Modal = new Web3Modal({\n      network: process.env.REACT_APP_NETWORK,\n      cacheProvider: true,\n      providerOptions: providerOptions\n    });\n    provider = await detectEthereumProvider();\n  };\n  init();\n  useEffect(() => {\n    async function update() {\n      if (window.sessionStorage.getItem(\"selected_account\") != null) {\n        setCurrentAccount(window.sessionStorage.getItem(\"selected_account\"));\n        if (provider) {\n          web3 = await initWeb3(provider);\n          const chainId = await web3.eth.getChainId();\n          let bal = await web3.eth.getBalance(window.sessionStorage.getItem(\"selected_account\"));\n          console.log(\"bal\", bal);\n          props.dispatch(accountUpdate({\n            account: window.sessionStorage.getItem(\"selected_account\"),\n            chainId: chainId,\n            balance: bal\n          }));\n        }\n      }\n    }\n    update();\n  }, [window.sessionStorage.getItem(\"selected_Account\"), web3, provider]);\n  // action on connect wallet button\n\n  const onConnect = async () => {\n    //Detect Provider\n    try {\n      provider = await web3Modal.connect();\n      if (provider.open) {\n        await provider.open();\n        web3 = initWeb3(provider);\n      }\n      window.sessionStorage.setItem(\"Provider\", provider);\n      if (!provider) {\n        console.log(\"no provider found\");\n      } else {\n        web3 = new Web3(provider);\n        await ConnectWallet();\n      }\n      const chainId = await web3.eth.getChainId();\n      if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\n        setWrongNetwork(true);\n        setIsPopup(true);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // connect wallet\n\n  const ConnectWallet = async () => {\n    if (\"caches\" in window) {\n      caches.keys().then(names => {\n        // Delete all the cache files\n        names.forEach(name => {\n          caches.delete(name);\n        });\n      });\n    }\n    try {\n      const chainId = await web3.eth.getChainId();\n      if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\n        console.log(\"Wrong network\");\n        setWrongNetwork(true);\n        setIsPopup(true);\n        props.dispatch(accountUpdate({\n          account: null,\n          chainId: chainId,\n          balance: null\n        }));\n      } else {\n        // Get list of accounts of the connected wallet\n        setWrongNetwork(false);\n        setIsPopup(false);\n        const accounts = await web3.eth.getAccounts();\n\n        // MetaMask does not give you all accounts, only the selected account\n        window.sessionStorage.setItem(\"selected_account\", accounts[0]);\n        const chainId = await web3.eth.getChainId();\n        let bal = await web3.eth.getBalance(accounts[0]);\n        console.log(\"bal\", bal);\n        window.sessionStorage.setItem(\"balance\", bal);\n        props.dispatch(accountUpdate({\n          account: accounts[0],\n          chainId: chainId,\n          balance: bal\n        }));\n        setCurrentAccount(accounts[0]);\n        let response1 = await checkuseraddress(window.sessionStorage.getItem(\"selected_account\"));\n        console.log(response1);\n        // let response = \"User Not found\";\n\n        if (response1.message === \"User Not Found\") {\n          try {\n            await Register(window.sessionStorage.getItem(\"selected_account\"));\n            console.log(\"User Registered Successfully\");\n            // setTimeout(() => (window.location.href = \"/profile\"), 2000);\n          } catch (e) {\n            console.log(\"Failed to Register\");\n            return;\n          }\n          try {\n            let token = await Login(window.sessionStorage.getItem(\"selected_account\"));\n            console.log(token);\n            props.dispatch(tokenUpdate({\n              token: token\n            }));\n            console.log(\"Logged In Successfully\");\n\n            // setTimeout(() => (window.location.href = \"/profile\"), 2000);\n          } catch (e) {\n            console.log(\"Failed to Login\");\n            return;\n          }\n        } else {\n          try {\n            let token = await Login(window.sessionStorage.getItem(\"selected_account\"));\n            console.log(token);\n            props.dispatch(tokenUpdate({\n              token: token\n            }));\n            console.log(\"Logged In Successfully\");\n            // setTimeout(() => (window.location.href = \"/profile\"), 2000);\n            // window.location.href = \"/profile\";\n          } catch (e) {\n            console.log(\"Failed to Login\");\n            return;\n          }\n        }\n      }\n    } catch (error) {\n      if (error.message) {\n        console.log(\"error\", error.message);\n      }\n    }\n  };\n\n  //  disconnect wallet\n\n  const onDisconnect = useCallback(async () => {\n    if (!web3) {\n      window.sessionStorage.removeItem(\"selected_account\");\n    }\n    if (web3) {\n      const chainId = await web3.eth.getChainId();\n      props.dispatch(accountUpdate({\n        account: null,\n        chainId: chainId,\n        balance: null\n      }));\n    }\n    window.sessionStorage.removeItem(\"selected_account\");\n    window.sessionStorage.removeItem(\"Provider\");\n    window.sessionStorage.removeItem(\"balance\");\n    await setCurrentAccount(null);\n    await web3Modal.clearCachedProvider();\n    web3Modal = null;\n    await Logout();\n    if (web3 && web3.currentProvider && web3.currentProvider.close) {\n      await web3.currentProvider.disconnect();\n    }\n    if (\"caches\" in window) {\n      caches.keys().then(names => {\n        // Delete all the cache files\n        names.forEach(name => {\n          caches.delete(name);\n        });\n      });\n      if (!wrongNetwork) window.location.reload(true);\n    }\n  }, [currentAccount]);\n  useEffect(() => {\n    if (provider) {\n      provider.on(\"chainChanged\", async _chainId => {\n        const chainId = parseInt(_chainId, 16);\n        console.log(process.env.REACT_APP_CHAIN_ID);\n        console.log(chainId);\n        if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\n          setWrongNetwork(true);\n          setIsPopup(true);\n          props.dispatch(accountUpdate({\n            account: null,\n            chainId: chainId,\n            balance: null\n          }));\n          props.dispatch(tokenUpdate({\n            token: null\n          }));\n          onDisconnect();\n        } else {\n          console.log(\"accountt\", currentAccount);\n          setWrongNetwork(false);\n          setIsPopup(false);\n          web3 = initWeb3(provider);\n          let bal = await web3.eth.getBalance(currentAccount);\n          console.log(\"bal\", bal);\n          window.sessionStorage.setItem(\"balance\", bal);\n          console.log(\"accounttt\", currentAccount);\n          props.dispatch(accountUpdate({\n            account: currentAccount,\n            chainId: chainId,\n            balance: bal\n          }));\n        }\n      });\n    }\n  }, [onDisconnect, currentAccount, props, provider]);\n\n  // function to detect account change\n\n  useEffect(() => {\n    if (provider) {\n      provider.on(\"accountsChanged\", async function (accounts) {\n        const id = await provider.request({\n          method: \"eth_chainId\"\n        });\n        const chainId = parseInt(id, 16);\n        if (chainId.toString() === process.env.REACT_APP_CHAIN_ID && currentAccount) {\n          console.log(\"accountt\", accounts[0]);\n          setCurrentAccount(accounts[0]);\n          window.sessionStorage.removeItem(\"selected_account\");\n          window.sessionStorage.setItem(\"selected_account\", accounts[0]);\n          web3 = initWeb3(provider);\n          let bal = await web3.eth.getBalance(accounts[0]);\n          console.log(\"bal\", bal);\n          window.sessionStorage.setItem(\"balance\", bal);\n          props.dispatch(accountUpdate({\n            account: accounts[0],\n            chainId: chainId,\n            balance: bal\n          }));\n          let response = await checkuseraddress(window.sessionStorage.getItem(\"selected_account\"));\n          if (response === \"User not found\") {\n            try {\n              await Register(window.sessionStorage.getItem(\"selected_account\", accounts[0]));\n              // setTimeout(() => (window.location.href = \"/profile\"), 2000);\n              console.log(\"New Wallet Registered Successfully\");\n            } catch (e) {\n              console.log(\"Failed to Register\");\n              return;\n            }\n            try {\n              let token = await Login(window.sessionStorage.getItem(\"selected_account\"));\n              props.dispatch(tokenUpdate({\n                token: token\n              }));\n              console.log(\"Logged In Successfully\");\n              // setTimeout(() => (window.location.href = \"/profile\"), 2000);\n              // window.location.href = \"/profile\";\n            } catch (e) {\n              console.log(\"Failed to Login\");\n              return;\n            }\n          } else {\n            try {\n              let token = await Login(window.sessionStorage.getItem(\"selected_account\"));\n              props.dispatch(tokenUpdate({\n                token: token\n              }));\n              console.log(\"Logged In Successfully\");\n              // setTimeout(() => (window.location.href = \"/profile\"), 2000);\n              // window.location.href = \"/profile\";\n            } catch (e) {\n              console.log(\"Failed to Login\");\n              return;\n            }\n          }\n        } else if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\n          setWrongNetwork(true);\n          setIsPopup(true);\n          props.dispatch(accountUpdate({\n            account: null,\n            chainId: chainId,\n            balance: null\n          }));\n          window.sessionStorage.removeItem(\"selected_account\");\n          setCurrentAccount(null);\n          await onDisconnect();\n        }\n        window.location.reload();\n      });\n    }\n  }, [currentAccount, provider]);\n\n  // function to detect network change\n\n  useEffect(() => {\n    async function updateAccount() {\n      if (provider) {\n        const id = await provider.request({\n          method: \"eth_chainId\"\n        });\n        window.sessionStorage.setItem(\"selected_account\", currentAccount);\n        const chainId = parseInt(id, 16);\n        web3 = initWeb3(provider);\n        let bal = await web3.eth.getBalance(currentAccount);\n        console.log(\"bal\", bal);\n        window.sessionStorage.setItem(\"balance\", currentAccount);\n        console.log(\"accounttt\", currentAccount);\n        props.dispatch(accountUpdate({\n          account: currentAccount,\n          chainId: chainId,\n          balance: bal\n        }));\n      }\n    }\n    if (currentAccount) {\n      updateAccount();\n    }\n  }, [currentAccount, provider]);\n  const changeNetwork = async _ref => {\n    let {\n      networkName\n    } = _ref;\n    try {\n      console.log(\"networkName\", networkName);\n      if (!window.ethereum) throw new Error(\"No crypto wallet found\");\n      await window.ethereum.request({\n        method: \"wallet_addEthereumChain\",\n        params: [{\n          ...Networks[networkName]\n        }]\n      });\n    } catch (err) {\n      // setError(err.message);\n    }\n  };\n  const handleNetworkSwitch = async networkName => {\n    await changeNetwork({\n      networkName\n    });\n    onConnect();\n  };\n  const togglePopup = () => {\n    setIsPopup(!isPopup);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-main\",\n      style: {\n        color: props.color\n      },\n      onClick: currentAccount ? onDisconnect : onConnect,\n      children: window.sessionStorage.getItem(\"selected_account\") && window.sessionStorage.getItem(\"selected_account\") !== \"undefined\" ? window.sessionStorage.getItem(\"selected_account\").slice(0, 5) + \"...\" + window.sessionStorage.getItem(\"selected_account\").slice(37, 42) : \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(AccountModal, \"h8mITtcjY3xBQHUwJfm9k2VSwXk=\");\n_c = AccountModal;\nconst mapStateToProps = state => {\n  return {\n    account: state.account,\n    token: state.token,\n    profileData: state.profileData\n  };\n};\nexport default connect(mapStateToProps)(AccountModal);\nvar _c;\n$RefreshReg$(_c, \"AccountModal\");","map":{"version":3,"names":["useState","useEffect","useCallback","Web3","connect","accountUpdate","tokenUpdate","Web3Modal","WalletConnectProvider","detectEthereumProvider","WalletLink","Networks","Login","Logout","Register","checkuseraddress","NotificationManager","PopupModal","BsExclamationLg","initWeb3","provider","web3","eth","extend","methods","name","call","outputFormatter","utils","hexToNumber","AccountModal","props","currentAccount","setCurrentAccount","wrongNetwork","setWrongNetwork","isPopup","setIsPopup","web3Modal","init","providerOptions","walletconnect","package","options","rpc","process","env","REACT_APP_RPC_URL","network","REACT_APP_NETWORK","chainId","REACT_APP_CHAIN_ID","display","logo","COINBASE_ICON","description","appName","networkUrl","connector","_","walletLink","makeWeb3Provider","enable","cacheProvider","update","window","sessionStorage","getItem","getChainId","bal","getBalance","console","log","dispatch","account","balance","onConnect","open","setItem","ConnectWallet","toString","error","caches","keys","then","names","forEach","delete","accounts","getAccounts","response1","message","e","token","onDisconnect","removeItem","clearCachedProvider","currentProvider","close","disconnect","location","reload","on","_chainId","parseInt","id","request","method","response","updateAccount","changeNetwork","networkName","ethereum","Error","params","err","handleNetworkSwitch","togglePopup","color","slice","mapStateToProps","state","profileData"],"sources":["/home/dell/Documents/Market/src/components/menu/AccountModal/Accountmodal.jsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport { connect } from \"react-redux\";\r\nimport { accountUpdate, tokenUpdate } from \"../../../redux/actions\";\r\nimport Web3Modal from \"web3modal\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport WalletLink from \"walletlink\";\r\nimport COINBASE_ICON from \"./../../../assets/react.svg\";\r\nimport { Networks } from \"./networks\";\r\nimport {\r\n  Login,\r\n  Logout,\r\n  Register,\r\n  checkuseraddress,\r\n} from \"../../../apiServices\";\r\n// import Authereum from \"authereum\";\r\n\r\nimport { NotificationManager } from \"react-notifications\";\r\nimport PopupModal from \"./popupModal\";\r\nimport { BsExclamationLg } from \"react-icons/bs\";\r\n// import \"./Mode.css\";\r\n\r\nfunction initWeb3(provider) {\r\n  const web3 = new Web3(provider);\r\n\r\n  web3.eth.extend({\r\n    methods: [\r\n      {\r\n        name: \"chainId\",\r\n        call: \"eth_chainId\",\r\n        outputFormatter: web3.utils.hexToNumber,\r\n      },\r\n    ],\r\n  });\r\n\r\n  return web3;\r\n}\r\n\r\nconst AccountModal = (props) => {\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n  const [wrongNetwork, setWrongNetwork] = useState(false);\r\n  const [isPopup, setIsPopup] = useState(false);\r\n  let web3Modal = null;\r\n  let web3 = null;\r\n  let provider = null;\r\n\r\n  // to initilize the web3Modal\r\n\r\n  const init = async () => {\r\n    const providerOptions = {\r\n      walletconnect: {\r\n        package: WalletConnectProvider,\r\n        options: {\r\n          rpc: {\r\n            80001: process.env.REACT_APP_RPC_URL,\r\n          },\r\n          network: process.env.REACT_APP_NETWORK,\r\n          chainId: process.env.REACT_APP_CHAIN_ID,\r\n          // infuraId: YOUR_INFURA_KEY,\r\n        },\r\n      },\r\n\r\n      \"custom-coinbase\": {\r\n        display: {\r\n          logo: COINBASE_ICON,\r\n          name: \"Coinbase\",\r\n          description: \"Scan with WalletLink to connect\",\r\n        },\r\n        options: {\r\n          appName: \"app\", // Your app name\r\n          networkUrl: process.env.REACT_APP_RPC_URL,\r\n          chainId: process.env.REACT_APP_CHAIN_ID,\r\n        },\r\n        package: WalletLink,\r\n        connector: async (_, options) => {\r\n          const { appName, networkUrl, chainId } = options;\r\n          const walletLink = new WalletLink({\r\n            appName,\r\n          });\r\n          const provider = walletLink.makeWeb3Provider(networkUrl, chainId);\r\n          await provider.enable();\r\n          return provider;\r\n        },\r\n      },\r\n    };\r\n\r\n    web3Modal = new Web3Modal({\r\n      network: process.env.REACT_APP_NETWORK,\r\n      cacheProvider: true,\r\n      providerOptions: providerOptions,\r\n    });\r\n    provider = await detectEthereumProvider();\r\n  };\r\n\r\n  init();\r\n\r\n  useEffect(() => {\r\n    async function update() {\r\n      if (window.sessionStorage.getItem(\"selected_account\") != null) {\r\n        setCurrentAccount(window.sessionStorage.getItem(\"selected_account\"));\r\n        if (provider) {\r\n          web3 = await initWeb3(provider);\r\n          const chainId = await web3.eth.getChainId();\r\n          let bal = await web3.eth.getBalance(\r\n            window.sessionStorage.getItem(\"selected_account\")\r\n          );\r\n          console.log(\"bal\", bal);\r\n          props.dispatch(\r\n            accountUpdate({\r\n              account: window.sessionStorage.getItem(\"selected_account\"),\r\n              chainId: chainId,\r\n              balance: bal,\r\n            })\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    update();\r\n  }, [window.sessionStorage.getItem(\"selected_Account\"), web3, provider]);\r\n  // action on connect wallet button\r\n\r\n  const onConnect = async () => {\r\n    //Detect Provider\r\n    try {\r\n      provider = await web3Modal.connect();\r\n      if (provider.open) {\r\n        await provider.open();\r\n        web3 = initWeb3(provider);\r\n      }\r\n      window.sessionStorage.setItem(\"Provider\", provider);\r\n      if (!provider) {\r\n        console.log(\"no provider found\");\r\n      } else {\r\n        web3 = new Web3(provider);\r\n        await ConnectWallet();\r\n      }\r\n      const chainId = await web3.eth.getChainId();\r\n\r\n      if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\r\n        setWrongNetwork(true);\r\n        setIsPopup(true);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // connect wallet\r\n\r\n  const ConnectWallet = async () => {\r\n    if (\"caches\" in window) {\r\n      caches.keys().then((names) => {\r\n        // Delete all the cache files\r\n        names.forEach((name) => {\r\n          caches.delete(name);\r\n        });\r\n      });\r\n    }\r\n    try {\r\n      const chainId = await web3.eth.getChainId();\r\n\r\n      if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\r\n        console.log(\"Wrong network\");\r\n        setWrongNetwork(true);\r\n        setIsPopup(true);\r\n        props.dispatch(\r\n          accountUpdate({\r\n            account: null,\r\n            chainId: chainId,\r\n            balance: null,\r\n          })\r\n        );\r\n      } else {\r\n        // Get list of accounts of the connected wallet\r\n        setWrongNetwork(false);\r\n        setIsPopup(false);\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        // MetaMask does not give you all accounts, only the selected account\r\n        window.sessionStorage.setItem(\"selected_account\", accounts[0]);\r\n        const chainId = await web3.eth.getChainId();\r\n        let bal = await web3.eth.getBalance(accounts[0]);\r\n        console.log(\"bal\", bal);\r\n        window.sessionStorage.setItem(\"balance\", bal);\r\n        props.dispatch(\r\n          accountUpdate({\r\n            account: accounts[0],\r\n            chainId: chainId,\r\n            balance: bal,\r\n          })\r\n        );\r\n        setCurrentAccount(accounts[0]);\r\n\r\n        let response1 = await checkuseraddress(\r\n          window.sessionStorage.getItem(\"selected_account\")\r\n        );\r\n        console.log(response1);\r\n        // let response = \"User Not found\";\r\n\r\n        if (response1.message === \"User Not Found\") {\r\n          try {\r\n            await Register(window.sessionStorage.getItem(\"selected_account\"));\r\n            console.log(\"User Registered Successfully\");\r\n            // setTimeout(() => (window.location.href = \"/profile\"), 2000);\r\n          } catch (e) {\r\n            console.log(\"Failed to Register\");\r\n            return;\r\n          }\r\n          try {\r\n            let token = await Login(\r\n              window.sessionStorage.getItem(\"selected_account\")\r\n            );\r\n            console.log(token);\r\n            props.dispatch(\r\n              tokenUpdate({\r\n                token: token,\r\n              })\r\n            );\r\n            console.log(\"Logged In Successfully\");\r\n\r\n            // setTimeout(() => (window.location.href = \"/profile\"), 2000);\r\n          } catch (e) {\r\n            console.log(\"Failed to Login\");\r\n            return;\r\n          }\r\n        } else {\r\n          try {\r\n            let token = await Login(\r\n              window.sessionStorage.getItem(\"selected_account\")\r\n            );\r\n            console.log(token);\r\n            props.dispatch(\r\n              tokenUpdate({\r\n                token: token,\r\n              })\r\n            );\r\n            console.log(\"Logged In Successfully\");\r\n            // setTimeout(() => (window.location.href = \"/profile\"), 2000);\r\n            // window.location.href = \"/profile\";\r\n          } catch (e) {\r\n            console.log(\"Failed to Login\");\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      if (error.message) {\r\n        console.log(\"error\", error.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  //  disconnect wallet\r\n\r\n  const onDisconnect = useCallback(async () => {\r\n    if (!web3) {\r\n      window.sessionStorage.removeItem(\"selected_account\");\r\n    }\r\n    if (web3) {\r\n      const chainId = await web3.eth.getChainId();\r\n      props.dispatch(\r\n        accountUpdate({\r\n          account: null,\r\n          chainId: chainId,\r\n          balance: null,\r\n        })\r\n      );\r\n    }\r\n    window.sessionStorage.removeItem(\"selected_account\");\r\n    window.sessionStorage.removeItem(\"Provider\");\r\n    window.sessionStorage.removeItem(\"balance\");\r\n    await setCurrentAccount(null);\r\n    await web3Modal.clearCachedProvider();\r\n    web3Modal = null;\r\n    await Logout();\r\n    if (web3 && web3.currentProvider && web3.currentProvider.close) {\r\n      await web3.currentProvider.disconnect();\r\n    }\r\n    if (\"caches\" in window) {\r\n      caches.keys().then((names) => {\r\n        // Delete all the cache files\r\n        names.forEach((name) => {\r\n          caches.delete(name);\r\n        });\r\n      });\r\n\r\n      if (!wrongNetwork) window.location.reload(true);\r\n    }\r\n  }, [currentAccount]);\r\n\r\n  useEffect(() => {\r\n    if (provider) {\r\n      provider.on(\"chainChanged\", async (_chainId) => {\r\n        const chainId = parseInt(_chainId, 16);\r\n        console.log(process.env.REACT_APP_CHAIN_ID);\r\n        console.log(chainId);\r\n\r\n        if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\r\n          setWrongNetwork(true);\r\n          setIsPopup(true);\r\n          props.dispatch(\r\n            accountUpdate({\r\n              account: null,\r\n              chainId: chainId,\r\n              balance: null,\r\n            })\r\n          );\r\n\r\n          props.dispatch(\r\n            tokenUpdate({\r\n              token: null,\r\n            })\r\n          );\r\n          onDisconnect();\r\n        } else {\r\n          console.log(\"accountt\", currentAccount);\r\n          setWrongNetwork(false);\r\n          setIsPopup(false);\r\n          web3 = initWeb3(provider);\r\n          let bal = await web3.eth.getBalance(currentAccount);\r\n          console.log(\"bal\", bal);\r\n          window.sessionStorage.setItem(\"balance\", bal);\r\n          console.log(\"accounttt\", currentAccount);\r\n          props.dispatch(\r\n            accountUpdate({\r\n              account: currentAccount,\r\n              chainId: chainId,\r\n              balance: bal,\r\n            })\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }, [onDisconnect, currentAccount, props, provider]);\r\n\r\n  // function to detect account change\r\n\r\n  useEffect(() => {\r\n    if (provider) {\r\n      provider.on(\"accountsChanged\", async function (accounts) {\r\n        const id = await provider.request({ method: \"eth_chainId\" });\r\n        const chainId = parseInt(id, 16);\r\n        if (\r\n          chainId.toString() === process.env.REACT_APP_CHAIN_ID &&\r\n          currentAccount\r\n        ) {\r\n          console.log(\"accountt\", accounts[0]);\r\n          setCurrentAccount(accounts[0]);\r\n          window.sessionStorage.removeItem(\"selected_account\");\r\n          window.sessionStorage.setItem(\"selected_account\", accounts[0]);\r\n          web3 = initWeb3(provider);\r\n          let bal = await web3.eth.getBalance(accounts[0]);\r\n          console.log(\"bal\", bal);\r\n          window.sessionStorage.setItem(\"balance\", bal);\r\n          props.dispatch(\r\n            accountUpdate({\r\n              account: accounts[0],\r\n              chainId: chainId,\r\n              balance: bal,\r\n            })\r\n          );\r\n          let response = await checkuseraddress(\r\n            window.sessionStorage.getItem(\"selected_account\")\r\n          );\r\n          if (response === \"User not found\") {\r\n            try {\r\n              await Register(\r\n                window.sessionStorage.getItem(\"selected_account\", accounts[0])\r\n              );\r\n              // setTimeout(() => (window.location.href = \"/profile\"), 2000);\r\n              console.log(\"New Wallet Registered Successfully\");\r\n            } catch (e) {\r\n              console.log(\"Failed to Register\");\r\n              return;\r\n            }\r\n            try {\r\n              let token = await Login(\r\n                window.sessionStorage.getItem(\"selected_account\")\r\n              );\r\n              props.dispatch(\r\n                tokenUpdate({\r\n                  token: token,\r\n                })\r\n              );\r\n              console.log(\"Logged In Successfully\");\r\n              // setTimeout(() => (window.location.href = \"/profile\"), 2000);\r\n              // window.location.href = \"/profile\";\r\n            } catch (e) {\r\n              console.log(\"Failed to Login\");\r\n              return;\r\n            }\r\n          } else {\r\n            try {\r\n              let token = await Login(\r\n                window.sessionStorage.getItem(\"selected_account\")\r\n              );\r\n              props.dispatch(\r\n                tokenUpdate({\r\n                  token: token,\r\n                })\r\n              );\r\n              console.log(\"Logged In Successfully\");\r\n              // setTimeout(() => (window.location.href = \"/profile\"), 2000);\r\n              // window.location.href = \"/profile\";\r\n            } catch (e) {\r\n              console.log(\"Failed to Login\");\r\n              return;\r\n            }\r\n          }\r\n        } else if (chainId.toString() !== process.env.REACT_APP_CHAIN_ID) {\r\n          setWrongNetwork(true);\r\n          setIsPopup(true);\r\n\r\n          props.dispatch(\r\n            accountUpdate({\r\n              account: null,\r\n              chainId: chainId,\r\n              balance: null,\r\n            })\r\n          );\r\n          window.sessionStorage.removeItem(\"selected_account\");\r\n          setCurrentAccount(null);\r\n          await onDisconnect();\r\n        }\r\n        window.location.reload();\r\n      });\r\n    }\r\n  }, [currentAccount, provider]);\r\n\r\n  // function to detect network change\r\n\r\n  useEffect(() => {\r\n    async function updateAccount() {\r\n      if (provider) {\r\n        const id = await provider.request({ method: \"eth_chainId\" });\r\n        window.sessionStorage.setItem(\"selected_account\", currentAccount);\r\n\r\n        const chainId = parseInt(id, 16);\r\n        web3 = initWeb3(provider);\r\n        let bal = await web3.eth.getBalance(currentAccount);\r\n        console.log(\"bal\", bal);\r\n        window.sessionStorage.setItem(\"balance\", currentAccount);\r\n        console.log(\"accounttt\", currentAccount);\r\n        props.dispatch(\r\n          accountUpdate({\r\n            account: currentAccount,\r\n            chainId: chainId,\r\n            balance: bal,\r\n          })\r\n        );\r\n      }\r\n    }\r\n    if (currentAccount) {\r\n      updateAccount();\r\n    }\r\n  }, [currentAccount, provider]);\r\n\r\n  const changeNetwork = async ({ networkName }) => {\r\n    try {\r\n      console.log(\"networkName\", networkName);\r\n      if (!window.ethereum) throw new Error(\"No crypto wallet found\");\r\n      await window.ethereum.request({\r\n        method: \"wallet_addEthereumChain\",\r\n        params: [\r\n          {\r\n            ...Networks[networkName],\r\n          },\r\n        ],\r\n      });\r\n    } catch (err) {\r\n      // setError(err.message);\r\n    }\r\n  };\r\n\r\n  const handleNetworkSwitch = async (networkName) => {\r\n    await changeNetwork({ networkName });\r\n    onConnect();\r\n  };\r\n\r\n  const togglePopup = () => {\r\n    setIsPopup(!isPopup);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        className=\"btn-main\"\r\n        style={{ color: props.color }}\r\n        onClick={currentAccount ? onDisconnect : onConnect}\r\n      >\r\n        {window.sessionStorage.getItem(\"selected_account\") &&\r\n        window.sessionStorage.getItem(\"selected_account\") !== \"undefined\"\r\n          ? window.sessionStorage.getItem(\"selected_account\").slice(0, 5) +\r\n            \"...\" +\r\n            window.sessionStorage.getItem(\"selected_account\").slice(37, 42)\r\n          : \"Connect Wallet\"}\r\n      </button>\r\n      {/* {wrongNetwork ? (\r\n        <>\r\n          {isPopup && (\r\n            <PopupModal\r\n              content={\r\n                <div className=\"popup-content\">\r\n                  <h2>WRONG NETWORK</h2>\r\n                  <p>Please switch to {process.env.REACT_APP_NETWORK}</p>\r\n                  <button\r\n                    className=\"btn-main content-btn\"\r\n                    style={{ color: props.color }}\r\n                    onClick={() =>\r\n                      handleNetworkSwitch(process.env.REACT_APP_NETWORK)\r\n                    }\r\n                  >\r\n                    Switch Network\r\n                  </button>\r\n                </div>\r\n              }\r\n              handleClose={togglePopup}\r\n            />\r\n          )}\r\n        </>\r\n      ) : null} */}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    account: state.account,\r\n    token: state.token,\r\n    profileData: state.profileData,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(AccountModal);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}