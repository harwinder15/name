{"ast":null,"code":"import { BigNumber } from \"big-number\";\nimport { ethers } from \"ethers\";\nimport simplerERC721ABI from \"./../Config/abis/simpleERC721.json\";\nimport simplerERC1155ABI from \"../Config/abis/simpleERC1155.json\";\nimport marketPlaceABI from \"../Config/abis/marketplace.json\";\nimport Creator1 from \"../Config/abis/creatorV1.json\";\nimport { readReceipt } from \"./getterFunctions\";\nimport { exportInstance, getOrderDetails, UpdateOrderStatus, DeleteOrder, InsertHistory, createCollection } from \"../apiServices\";\nexport const handleCollectionCreation = async (isSingle, collectionData, account) => {\n  console.log(\"collection data\", collectionData);\n  // let Provider = new ethers.providers.Web3Provider(window.ethereum);\n  // const Signer = await Provider.getSigner();\n  // const creator = new ethers.Contract(\n  //   \"0x00e8938EFb57A1A135c4f6fDBCee6CF9E64777c8\",\n  //   Creator1.abi,\n  //   Signer\n  // );\n\n  let creator = await exportInstance(\"0x00e8938EFb57A1A135c4f6fDBCee6CF9E64777c8\", Creator1.abi);\n  console.log(creator);\n  let res1;\n  let contractAddress;\n  let fd;\n  console.log(collectionData);\n  try {\n    if (isSingle) res1 = await creator.deploySimpleERC721(collectionData.sName, collectionData.symbol, collectionData.nftFile, collectionData.sRoyaltyPercentage);else {\n      res1 = await creator.deploySimpleERC1155(collectionData.nftFile, collectionData.sRoyaltyPercentage);\n    }\n    let hash = res1;\n    res1 = await res1.wait();\n    if (res1.status === 0) {\n      // NotificationManager.error(\"Transaction failed\");\n      console.log(\"Transaction Failed S\");\n      return;\n    }\n    contractAddress = await readReceipt(hash);\n    console.log(\"contract receipt\", contractAddress);\n    let royalty = await exportInstance(contractAddress, isSingle ? simplerERC721ABI.abi : simplerERC1155ABI.abi);\n    let res = await royalty.setDefaultRoyaltyDistribution([account], [collectionData.sRoyaltyPercentage]);\n    res = await res.wait();\n    console.log(collectionData.sName);\n    console.log(collectionData.sDescription);\n    console.log(\"==========\", collectionData.nftFile);\n    if (res.status === 0) {\n      // NotificationManager.error(\"Transaction failed\");\n      console.log(\"Transaction Failed B\");\n      return;\n    }\n    if (res1.status === 1) {\n      fd = new FormData();\n      fd.append(\"sName\", collectionData.sName);\n      fd.append(\"sDescription\", collectionData.sDescription);\n      fd.append(\"nftFile\", collectionData.nftFile);\n      fd.append(\"sContractAddress\", contractAddress);\n      fd.append(\"erc721\", isSingle ? JSON.stringify(true) : JSON.stringify(false));\n      fd.append(\"sRoyaltyPercentage\", collectionData.sRoyaltyPercentage);\n      fd.append(\"quantity\", collectionData.quantity);\n    }\n    await createCollection(fd);\n    console.log(await createCollection(fd));\n    console.log(\"Collection Created Successfully\");\n    return true;\n  } catch (e) {\n    console.log(\"Transaction Failed A\");\n    console.log(\"error in contract function call\", e);\n    if (e.code === 401) {\n      // NotificationManager.error(\"User denied \");\n      console.log(\"User Denied\");\n      return false;\n    }\n  }\n};","map":{"version":3,"names":["BigNumber","ethers","simplerERC721ABI","simplerERC1155ABI","marketPlaceABI","Creator1","readReceipt","exportInstance","getOrderDetails","UpdateOrderStatus","DeleteOrder","InsertHistory","createCollection","handleCollectionCreation","isSingle","collectionData","account","console","log","creator","abi","res1","contractAddress","fd","deploySimpleERC721","sName","symbol","nftFile","sRoyaltyPercentage","deploySimpleERC1155","hash","wait","status","royalty","res","setDefaultRoyaltyDistribution","sDescription","FormData","append","JSON","stringify","quantity","e","code"],"sources":["/home/dell/Documents/Market/src/helpers/sendFunctions.js"],"sourcesContent":["import { BigNumber } from \"big-number\";\nimport { ethers } from \"ethers\";\n\nimport simplerERC721ABI from \"./../Config/abis/simpleERC721.json\";\nimport simplerERC1155ABI from \"../Config/abis/simpleERC1155.json\";\nimport marketPlaceABI from \"../Config/abis/marketplace.json\";\nimport Creator1 from \"../Config/abis/creatorV1.json\";\nimport { readReceipt } from \"./getterFunctions\";\n\nimport {\n  exportInstance,\n  getOrderDetails,\n  UpdateOrderStatus,\n  DeleteOrder,\n  InsertHistory,\n  createCollection,\n} from \"../apiServices\";\n\nexport const handleCollectionCreation = async (\n  isSingle,\n  collectionData,\n  account\n) => {\n  console.log(\"collection data\", collectionData);\n  // let Provider = new ethers.providers.Web3Provider(window.ethereum);\n  // const Signer = await Provider.getSigner();\n  // const creator = new ethers.Contract(\n  //   \"0x00e8938EFb57A1A135c4f6fDBCee6CF9E64777c8\",\n  //   Creator1.abi,\n  //   Signer\n  // );\n\n  let creator = await exportInstance(\n    \"0x00e8938EFb57A1A135c4f6fDBCee6CF9E64777c8\",\n    Creator1.abi\n  );\n  console.log(creator);\n  let res1;\n  let contractAddress;\n  let fd;\n  console.log(collectionData);\n  try {\n    if (isSingle)\n      res1 = await creator.deploySimpleERC721(\n        collectionData.sName,\n        collectionData.symbol,\n        collectionData.nftFile,\n        collectionData.sRoyaltyPercentage\n      );\n    else {\n      res1 = await creator.deploySimpleERC1155(\n        collectionData.nftFile,\n        collectionData.sRoyaltyPercentage\n      );\n    }\n    let hash = res1;\n    res1 = await res1.wait();\n    if (res1.status === 0) {\n      // NotificationManager.error(\"Transaction failed\");\n      console.log(\"Transaction Failed S\");\n      return;\n    }\n    contractAddress = await readReceipt(hash);\n    console.log(\"contract receipt\", contractAddress);\n    let royalty = await exportInstance(\n      contractAddress,\n      isSingle ? simplerERC721ABI.abi : simplerERC1155ABI.abi\n    );\n\n    let res = await royalty.setDefaultRoyaltyDistribution(\n      [account],\n      [collectionData.sRoyaltyPercentage]\n    );\n    res = await res.wait();\n    console.log(collectionData.sName);\n    console.log(collectionData.sDescription);\n    console.log(\"==========\", collectionData.nftFile);\n    if (res.status === 0) {\n      // NotificationManager.error(\"Transaction failed\");\n      console.log(\"Transaction Failed B\");\n      return;\n    }\n\n    if (res1.status === 1) {\n      fd = new FormData();\n\n      fd.append(\"sName\", collectionData.sName);\n      fd.append(\"sDescription\", collectionData.sDescription);\n      fd.append(\"nftFile\", collectionData.nftFile);\n      fd.append(\"sContractAddress\", contractAddress);\n      fd.append(\n        \"erc721\",\n        isSingle ? JSON.stringify(true) : JSON.stringify(false)\n      );\n      fd.append(\"sRoyaltyPercentage\", collectionData.sRoyaltyPercentage);\n      fd.append(\"quantity\", collectionData.quantity);\n    }\n    await createCollection(fd);\n    console.log(await createCollection(fd));\n\n    console.log(\"Collection Created Successfully\");\n    return true;\n  } catch (e) {\n    console.log(\"Transaction Failed A\");\n\n    console.log(\"error in contract function call\", e);\n    if (e.code === 401) {\n      // NotificationManager.error(\"User denied \");\n      console.log(\"User Denied\");\n      return false;\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}